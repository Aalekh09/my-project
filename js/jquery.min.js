/* jQuery 3.6.0 - Minimal Implementation for Offline Use */
(function(global) {
  'use strict';
  
  function jQuery(selector) {
    return new jQuery.fn.init(selector);
  }
  
  jQuery.fn = jQuery.prototype = {
    constructor: jQuery,
    length: 0,
    
    init: function(selector) {
      if (!selector) return this;
      
      if (typeof selector === 'string') {
        var elements = document.querySelectorAll(selector);
        for (var i = 0; i < elements.length; i++) {
          this[i] = elements[i];
        }
        this.length = elements.length;
      } else if (selector.nodeType) {
        this[0] = selector;
        this.length = 1;
      }
      return this;
    },
    
    ready: function(callback) {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', callback);
      } else {
        callback();
      }
      return this;
    },
    
    on: function(event, handler) {
      for (var i = 0; i < this.length; i++) {
        this[i].addEventListener(event, handler);
      }
      return this;
    },
    
    click: function(handler) {
      return this.on('click', handler);
    },
    
    val: function(value) {
      if (value === undefined) {
        return this[0] ? this[0].value : '';
      }
      for (var i = 0; i < this.length; i++) {
        this[i].value = value;
      }
      return this;
    },
    
    text: function(text) {
      if (text === undefined) {
        return this[0] ? this[0].textContent : '';
      }
      for (var i = 0; i < this.length; i++) {
        this[i].textContent = text;
      }
      return this;
    },
    
    html: function(html) {
      if (html === undefined) {
        return this[0] ? this[0].innerHTML : '';
      }
      for (var i = 0; i < this.length; i++) {
        this[i].innerHTML = html;
      }
      return this;
    },
    
    hide: function() {
      for (var i = 0; i < this.length; i++) {
        this[i].style.display = 'none';
      }
      return this;
    },
    
    show: function() {
      for (var i = 0; i < this.length; i++) {
        this[i].style.display = '';
      }
      return this;
    },
    
    addClass: function(className) {
      for (var i = 0; i < this.length; i++) {
        this[i].classList.add(className);
      }
      return this;
    },
    
    removeClass: function(className) {
      for (var i = 0; i < this.length; i++) {
        this[i].classList.remove(className);
      }
      return this;
    }
  };
  
  jQuery.fn.init.prototype = jQuery.fn;
  
  // Static methods
  jQuery.extend = function(target, source) {
    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    }
    return target;
  };
  
  jQuery.ajax = function(options) {
    var xhr = new XMLHttpRequest();
    var method = options.type || options.method || 'GET';
    var url = options.url;
    var data = options.data;
    
    xhr.open(method, url, true);
    
    if (options.contentType !== false) {
      xhr.setRequestHeader('Content-Type', options.contentType || 'application/x-www-form-urlencoded');
    }
    
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {
        if (xhr.status >= 200 && xhr.status < 300) {
          if (options.success) {
            var response = xhr.responseText;
            try {
              if (options.dataType === 'json') {
                response = JSON.parse(response);
              }
            } catch (e) {}
            options.success(response);
          }
        } else {
          if (options.error) {
            options.error(xhr, xhr.statusText);
          }
        }
      }
    };
    
    xhr.send(data);
    return xhr;
  };
  
  // Export
  global.$ = global.jQuery = jQuery;
  
})(window);

// Document ready shorthand
$(function() {
  // Initialize when DOM is ready
});