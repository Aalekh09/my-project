/* DataTables - Minimal Implementation for Offline Use */
(function($) {
  'use strict';
  
  if (!$) {
    console.error('DataTables requires jQuery');
    return;
  }
  
  $.fn.DataTable = function(options) {
    return this.each(function() {
      var table = this;
      var $table = $(table);
      
      // Default options
      var settings = $.extend({
        paging: true,
        searching: true,
        ordering: true,
        info: true,
        pageLength: 10,
        lengthMenu: [10, 25, 50, 100],
        language: {
          search: "Search:",
          lengthMenu: "Show _MENU_ entries",
          info: "Showing _START_ to _END_ of _TOTAL_ entries",
          paginate: {
            first: "First",
            last: "Last",
            next: "Next",
            previous: "Previous"
          }
        }
      }, options);
      
      // Store original data
      var originalRows = Array.from(table.querySelectorAll('tbody tr'));
      var currentRows = [...originalRows];
      
      // Create wrapper
      var wrapper = document.createElement('div');
      wrapper.className = 'dataTables_wrapper';
      table.parentNode.insertBefore(wrapper, table);
      wrapper.appendChild(table);
      
      // Create controls container
      var controlsTop = document.createElement('div');
      controlsTop.className = 'dataTables_controls_top d-flex justify-content-between mb-3';
      wrapper.insertBefore(controlsTop, table);
      
      var controlsBottom = document.createElement('div');
      controlsBottom.className = 'dataTables_controls_bottom d-flex justify-content-between mt-3';
      wrapper.appendChild(controlsBottom);
      
      // Length menu
      if (settings.paging) {
        var lengthDiv = document.createElement('div');
        lengthDiv.className = 'dataTables_length';
        lengthDiv.innerHTML = '<label>' + settings.language.lengthMenu.replace('_MENU_', 
          '<select class="form-select form-select-sm d-inline-block w-auto">' +
          settings.lengthMenu.map(function(len) {
            return '<option value="' + len + '"' + (len === settings.pageLength ? ' selected' : '') + '>' + len + '</option>';
          }).join('') +
          '</select>') + '</label>';
        controlsTop.appendChild(lengthDiv);
        
        var lengthSelect = lengthDiv.querySelector('select');
        lengthSelect.addEventListener('change', function() {
          settings.pageLength = parseInt(this.value);
          currentPage = 1;
          updateDisplay();
        });
      }
      
      // Search box
      if (settings.searching) {
        var searchDiv = document.createElement('div');
        searchDiv.className = 'dataTables_filter';
        searchDiv.innerHTML = '<label>' + settings.language.search + ' <input type="search" class="form-control form-control-sm d-inline-block w-auto" placeholder=""></label>';
        controlsTop.appendChild(searchDiv);
        
        var searchInput = searchDiv.querySelector('input');
        searchInput.addEventListener('input', function() {
          var searchTerm = this.value.toLowerCase();
          currentRows = originalRows.filter(function(row) {
            return row.textContent.toLowerCase().includes(searchTerm);
          });
          currentPage = 1;
          updateDisplay();
        });
      }
      
      // Pagination variables
      var currentPage = 1;
      var totalPages = 1;
      
      // Update display function
      function updateDisplay() {
        // Calculate pagination
        totalPages = Math.ceil(currentRows.length / settings.pageLength);
        if (currentPage > totalPages) currentPage = totalPages || 1;
        
        // Clear tbody
        var tbody = table.querySelector('tbody');
        tbody.innerHTML = '';
        
        // Show current page rows
        if (settings.paging) {
          var startIndex = (currentPage - 1) * settings.pageLength;
          var endIndex = Math.min(startIndex + settings.pageLength, currentRows.length);
          
          for (var i = startIndex; i < endIndex; i++) {
            tbody.appendChild(currentRows[i].cloneNode(true));
          }
        } else {
          currentRows.forEach(function(row) {
            tbody.appendChild(row.cloneNode(true));
          });
        }
        
        // Update info
        updateInfo();
        updatePagination();
      }
      
      // Update info
      function updateInfo() {
        if (!settings.info) return;
        
        var infoDiv = wrapper.querySelector('.dataTables_info');
        if (!infoDiv) {
          infoDiv = document.createElement('div');
          infoDiv.className = 'dataTables_info';
          controlsBottom.appendChild(infoDiv);
        }
        
        if (currentRows.length === 0) {
          infoDiv.textContent = 'No entries to show';
        } else {
          var start = settings.paging ? (currentPage - 1) * settings.pageLength + 1 : 1;
          var end = settings.paging ? Math.min(currentPage * settings.pageLength, currentRows.length) : currentRows.length;
          var total = currentRows.length;
          
          infoDiv.textContent = settings.language.info
            .replace('_START_', start)
            .replace('_END_', end)
            .replace('_TOTAL_', total);
        }
      }
      
      // Update pagination
      function updatePagination() {
        if (!settings.paging) return;
        
        var paginateDiv = wrapper.querySelector('.dataTables_paginate');
        if (!paginateDiv) {
          paginateDiv = document.createElement('div');
          paginateDiv.className = 'dataTables_paginate';
          controlsBottom.appendChild(paginateDiv);
        }
        
        var pagination = '<nav><ul class="pagination pagination-sm mb-0">';
        
        // Previous button
        pagination += '<li class="page-item' + (currentPage === 1 ? ' disabled' : '') + '">';
        pagination += '<a class="page-link" href="#" data-page="' + (currentPage - 1) + '">' + settings.language.paginate.previous + '</a>';
        pagination += '</li>';
        
        // Page numbers
        var startPage = Math.max(1, currentPage - 2);
        var endPage = Math.min(totalPages, currentPage + 2);
        
        for (var i = startPage; i <= endPage; i++) {
          pagination += '<li class="page-item' + (i === currentPage ? ' active' : '') + '">';
          pagination += '<a class="page-link" href="#" data-page="' + i + '">' + i + '</a>';
          pagination += '</li>';
        }
        
        // Next button
        pagination += '<li class="page-item' + (currentPage === totalPages ? ' disabled' : '') + '">';
        pagination += '<a class="page-link" href="#" data-page="' + (currentPage + 1) + '">' + settings.language.paginate.next + '</a>';
        pagination += '</li>';
        
        pagination += '</ul></nav>';
        paginateDiv.innerHTML = pagination;
        
        // Add click handlers
        paginateDiv.addEventListener('click', function(e) {
          e.preventDefault();
          var link = e.target.closest('a[data-page]');
          if (!link || link.closest('.disabled')) return;
          
          var newPage = parseInt(link.getAttribute('data-page'));
          if (newPage >= 1 && newPage <= totalPages) {
            currentPage = newPage;
            updateDisplay();
          }
        });
      }
      
      // Column sorting
      if (settings.ordering) {
        var headers = table.querySelectorAll('thead th');
        headers.forEach(function(header, index) {
          header.style.cursor = 'pointer';
          header.addEventListener('click', function() {
            sortByColumn(index);
          });
        });
      }
      
      function sortByColumn(columnIndex) {
        var isAscending = !table.getAttribute('data-sort-asc-' + columnIndex);
        
        currentRows.sort(function(a, b) {
          var aText = a.cells[columnIndex] ? a.cells[columnIndex].textContent.trim() : '';
          var bText = b.cells[columnIndex] ? b.cells[columnIndex].textContent.trim() : '';
          
          // Try to parse as numbers
          var aNum = parseFloat(aText);
          var bNum = parseFloat(bText);
          
          if (!isNaN(aNum) && !isNaN(bNum)) {
            return isAscending ? aNum - bNum : bNum - aNum;
          }
          
          // String comparison
          return isAscending ? aText.localeCompare(bText) : bText.localeCompare(aText);
        });
        
        table.setAttribute('data-sort-asc-' + columnIndex, isAscending);
        currentPage = 1;
        updateDisplay();
      }
      
      // Initial display
      updateDisplay();
      
      // Return API object
      return {
        draw: updateDisplay,
        search: function(term) {
          if (searchInput) {
            searchInput.value = term;
            searchInput.dispatchEvent(new Event('input'));
          }
        }
      };
    });
  };
  
  // Alias
  $.fn.dataTable = $.fn.DataTable;
  
})(window.jQuery);

// Export for global use
if (typeof window !== 'undefined') {
  window.DataTable = window.jQuery ? window.jQuery.fn.DataTable : null;
}